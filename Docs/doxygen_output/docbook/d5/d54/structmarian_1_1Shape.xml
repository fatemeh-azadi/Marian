<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="d5/d54/structmarian_1_1Shape">
<title>marian::Shape struct Reference</title>
<para>
    <programlisting>#include <link linkend="da/d18/shape_8h">&lt;shape.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for marian::Shape</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../df/dec/structmarian_1_1Shape__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for marian::Shape</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../dc/d3a/structmarian_1_1Shape__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Public Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int shape_[SHAPE_SIZE]</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int stride_[SHAPE_SIZE]</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int bstride_[SHAPE_SIZE]</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="d5/d54/structmarian_1_1Shape_1a5d3976a7b93ffeb26bcb4fd020760f6f">Shape</link> (
)<para><emphasis>Constructs a default shape.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="d5/d54/structmarian_1_1Shape_1adb8f3c0ab0efd3ca4253d5d7e998b9cc">Shape</link> (
std::initializer_list&lt; int &gt; il)<para><emphasis>Constructs a shape.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d5/d54/structmarian_1_1Shape_1a9cf031011a4b53538dda070a77ad19f9">updateStrides</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="d5/d54/structmarian_1_1Shape_1a5b79f3dd7ab6441b2b2bffdd07eba8a3">Shape</link> (
const <link linkend="d5/d54/structmarian_1_1Shape">Shape</link> &amp; shape)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d5/d54/structmarian_1_1Shape_1a2849bb218aa2214bbab47256a9452caf">set</link> (
int i, int dim)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1af416da295388777386ae8b834115066f">dim</link> (
int i)<para><emphasis>Gets a reference to the int representing the size of the
&lt;code&gt;i&lt;/code&gt;th dimension represented by this object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1aca204099494ae601fddeb4be4bc3f189">dim</link> (
int i)<para><emphasis>Gets the size of the &lt;code&gt;i&lt;/code&gt;th dimension represented by this
object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1a08ec40e4c6a6236f8392d3328a40c8cc">operator[]</link> (
int i)<para><emphasis>Gets a reference to the int representing the size of the
&lt;code&gt;i&lt;/code&gt;th dimension represented by this object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1ac6532138e02276d3a79bad788ca7e00b">operator[]</link> (
int i)<para><emphasis>Gets the size of the &lt;code&gt;i&lt;/code&gt;th dimension represented by this
object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1aca536a163ca8729bd0703250a0f83aa8">stride</link> (
int i)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1a1d256f7b75335696bf3dec9368a718b2">bstride</link> (
int i)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>size_t <link linkend="d5/d54/structmarian_1_1Shape_1ad44c5095408e203526566bc8b7c20a4b">size</link> (
)<para><emphasis>Gets the number of dimensions represented by this object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1ac5b429b8024a6de2e2b4c089757f398f">elements</link> (
)<para><emphasis>Gets the total number of elements in a tensor of this shape.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1a6fd892ce40df247ae6e8631061cd182f">index</link> (
int * d)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d5/d54/structmarian_1_1Shape_1a323033b473c9563967559bbd2def9f3c">bindex</link> (
int * d)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d5/d54/structmarian_1_1Shape_1afe51de9add418af661585454ff3ed30b">dims</link> (
int i, int * d)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int * <link linkend="d5/d54/structmarian_1_1Shape_1aec078a9049c1007834e21090a0fcd057">begin</link> (
)<para><emphasis>Gets a pointer to an int that specifies the size of the first
dimension represented by this object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int * <link linkend="d5/d54/structmarian_1_1Shape_1ac024a9b46f6a11c46019cd9a5daad0cd">end</link> (
)<para><emphasis>Gets a pointer to an int that specifies the size of the last
dimension represented by this object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const int * <link linkend="d5/d54/structmarian_1_1Shape_1a93da043421ee163164382cc55237dfcd">begin</link> (
)<para><emphasis>Gets a const pointer to an int that specifies the size of the first
dimension represented by this object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const int * <link linkend="d5/d54/structmarian_1_1Shape_1a7c60b16a225007f5d7fb9de59084dcd3">end</link> (
)<para><emphasis>Gets a const pointer to an int that specifies the size of the last
dimension represented by this object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="d5/d54/structmarian_1_1Shape_1aa2eb67555a64ae06a4ec561dbd18b4e0">operator==</link> (
const <link linkend="d5/d54/structmarian_1_1Shape">Shape</link> &amp; other)<para><emphasis>Tests this object for equality against another &lt;code&gt;Shape&lt;/code&gt;
object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="d5/d54/structmarian_1_1Shape_1acfc1599d458f3b6837be724e4e96161a">operator!=</link> (
const <link linkend="d5/d54/structmarian_1_1Shape">Shape</link> &amp; other)<para><emphasis>Tests this object for inequality against another &lt;code&gt;Shape&lt;/code&gt;
object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a5d3976a7b93ffeb26bcb4fd020760f6f">
                <title>marian::Shape::Shape ()</title> <emphasis>Constructs a default shape.</emphasis>
                
<para>This default shape has four dimensions. The size of each dimension is 1. </para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1adb8f3c0ab0efd3ca4253d5d7e998b9cc">
                <title>marian::Shape::Shape (std::initializer_list&lt; int &gt; il)</title> <emphasis>Constructs a shape.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>A list of integers representing the size of each dimension. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a9cf031011a4b53538dda070a77ad19f9">
                <title>void marian::Shape::updateStrides ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a5b79f3dd7ab6441b2b2bffdd07eba8a3">
                <title>marian::Shape::Shape (const Shape &amp;shape)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a2849bb218aa2214bbab47256a9452caf">
                <title>void marian::Shape::set (int i, int dim)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1af416da295388777386ae8b834115066f">
                <title>int marian::Shape::dim (int i)</title> <emphasis>Gets a reference to the int representing the size of the
&lt;code&gt;i&lt;/code&gt;th dimension represented by this object.</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>a reference to the int representing the size of the <computeroutput>i</computeroutput>th dimension represented by this object </para>
</formalpara>
</para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1aca204099494ae601fddeb4be4bc3f189">
                <title>int marian::Shape::dim (int i) const </title> <emphasis>Gets the size of the &lt;code&gt;i&lt;/code&gt;th dimension represented by this
object.</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>the size of the <computeroutput>i</computeroutput>th dimension represented by this object </para>
</formalpara>
</para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a08ec40e4c6a6236f8392d3328a40c8cc">
                <title>int marian::Shape::operator[] (int i)</title> <emphasis>Gets a reference to the int representing the size of the
&lt;code&gt;i&lt;/code&gt;th dimension represented by this object.</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>a reference to the int representing the size of the <computeroutput>i</computeroutput>th dimension represented by this object </para>
</formalpara>
</para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1ac6532138e02276d3a79bad788ca7e00b">
                <title>int marian::Shape::operator[] (int i) const </title> <emphasis>Gets the size of the &lt;code&gt;i&lt;/code&gt;th dimension represented by this
object.</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>the size of the <computeroutput>i</computeroutput>th dimension represented by this object </para>
</formalpara>
</para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1aca536a163ca8729bd0703250a0f83aa8">
                <title>int marian::Shape::stride (int i) const </title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a1d256f7b75335696bf3dec9368a718b2">
                <title>int marian::Shape::bstride (int i) const </title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1ad44c5095408e203526566bc8b7c20a4b">
                <title>size_t marian::Shape::size () const </title> <emphasis>Gets the number of dimensions represented by this object.</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>the number of dimensions represented by this object </para>
</formalpara>
</para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1ac5b429b8024a6de2e2b4c089757f398f">
                <title>int marian::Shape::elements () const </title> <emphasis>Gets the total number of elements in a tensor of this shape.</emphasis>
                
<para>For example, if this shape represents a 5x100 tensor, this method would return 500.</para>

<para><formalpara><title>Returns: </title>

<para>the total number of elements in a tensor of this shape </para>
</formalpara>
</para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a6fd892ce40df247ae6e8631061cd182f">
                <title>int marian::Shape::index (int *d) const </title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a323033b473c9563967559bbd2def9f3c">
                <title>int marian::Shape::bindex (int *d) const </title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1afe51de9add418af661585454ff3ed30b">
                <title>void marian::Shape::dims (int i, int *d) const </title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1aec078a9049c1007834e21090a0fcd057">
                <title>int* marian::Shape::begin ()</title> <emphasis>Gets a pointer to an int that specifies the size of the first
dimension represented by this object.</emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1ac024a9b46f6a11c46019cd9a5daad0cd">
                <title>int* marian::Shape::end ()</title> <emphasis>Gets a pointer to an int that specifies the size of the last
dimension represented by this object.</emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a93da043421ee163164382cc55237dfcd">
                <title>const int* marian::Shape::begin () const </title> <emphasis>Gets a const pointer to an int that specifies the size of the first
dimension represented by this object.</emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1a7c60b16a225007f5d7fb9de59084dcd3">
                <title>const int* marian::Shape::end () const </title> <emphasis>Gets a const pointer to an int that specifies the size of the last
dimension represented by this object.</emphasis>
                
            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1aa2eb67555a64ae06a4ec561dbd18b4e0">
                <title>bool marian::Shape::operator== (const Shape &amp;other) const </title> <emphasis>Tests this object for equality against another &lt;code&gt;Shape&lt;/code&gt;
object.</emphasis>
                
<para><formalpara><title>Returns: </title>

<para><computeroutput>true</computeroutput> if the size of each dimension in this object is equal to the size of the corresponding dimension in the other object, <computeroutput>false</computeroutput> otherwise </para>
</formalpara>
</para>

            </section>
            <section xml:id="d5/d54/structmarian_1_1Shape_1acfc1599d458f3b6837be724e4e96161a">
                <title>bool marian::Shape::operator!= (const Shape &amp;other) const </title> <emphasis>Tests this object for inequality against another &lt;code&gt;Shape&lt;/code&gt;
object.</emphasis>
                
            </section>
</section>
