<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="da/db9/classmarian_1_1ExpressionGraph">
<title>marian::ExpressionGraph class Reference</title>
<para>
    <programlisting>#include <link linkend="d7/d4f/expression__graph_8h">&lt;expression_graph.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for marian::ExpressionGraph</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../dc/dae/classmarian_1_1ExpressionGraph__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for marian::ExpressionGraph</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../d6/db8/classmarian_1_1ExpressionGraph__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>size_t count_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::list&lt; Expr &gt; nodesForward_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::list&lt; Expr &gt; nodesBackward_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::unordered_set&lt; Expr &gt; topNodes_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Ptr&lt; Parameters &gt; params_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Ptr&lt; TensorAllocator &gt; tensors_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>size_t device_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Ptr&lt; Backend &gt; backend_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::unordered_map&lt; size_t, WExpr &gt; hashMap_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool inferenceOnly_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool reloaded_</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string namespace_</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a65e074b28afd37450ef025bb97e06efa">ExpressionGraph</link> (
const <link linkend="da/db9/classmarian_1_1ExpressionGraph">ExpressionGraph</link> &amp; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1ac1669810aad34acc14f6f2e5eea13a9d">ExpressionGraph</link> (
<link linkend="da/db9/classmarian_1_1ExpressionGraph">ExpressionGraph</link> &amp;&amp; )</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a40b3f2a4c0bacb782241f321bd1d429c">ExpressionGraph</link> (
bool inference)<para><emphasis>Constructs a new expression graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a9dbcf2ff5e7ad496082daab4c71e4ea4">~ExpressionGraph</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a887b328e3073bbdef1869ae6ff632ca4">setDevice</link> (
size_t device)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>size_t <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a6de2782630380b0b2d3a1ded6db5324d">getDevice</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1ad1a373be43a00ef9ce35666145137b08">Ptr</link>&lt; <link linkend="dc/d10/classmarian_1_1Backend">Backend</link> &gt; <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a714920827388a0d6f880a90c2e5e5be0">getBackend</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1aec6911dc81df2dfbfb2c3ee6cfa6532a">switchParams</link> (
const std::string &amp; newNamespace)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1ae746a90c60109c20fd154ec6f491ea0e">reserveWorkspaceMB</link> (
size_t num)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a9b2b3ec0ad988aad229f779416632aa8">copyParams</link> (
<link linkend="da/d22/namespacemarian_1ad1a373be43a00ef9ce35666145137b08">Ptr</link>&lt; <link linkend="da/db9/classmarian_1_1ExpressionGraph">ExpressionGraph</link> &gt; graph)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a9ffa36f849946ba0153bd0e8f18e31f9">reuseWorkspace</link> (
<link linkend="da/d22/namespacemarian_1ad1a373be43a00ef9ce35666145137b08">Ptr</link>&lt; <link linkend="da/db9/classmarian_1_1ExpressionGraph">ExpressionGraph</link> &gt; graph)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1aac6f1862944bd673e6874662d9d4b465">backprop</link> (
)<para><emphasis>Performs backpropogation on this expression graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a1ce5fad852cb6d30cfd0a2d729bb44c3">fits</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1aa7596e34cc2895cf374ce06d9d5ee370">forward</link> (
)<para><emphasis>Perform the forward pass of algorithmic differentiation (AD) on this
graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a41337743d6e030cf6b8e2b2e4d39a908">forwardNext</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1ae4be44e38a47b0964a24880078eb16c3">backward</link> (
)<para><emphasis>Perform the backward pass of algorithmic differentiation (AD) on
this graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a3bbdbd8964031c78c7825958d1e9c9fe">graphviz</link> (
)<para><emphasis>Returns a string representing this expression graph in
&lt;code&gt;graphviz&lt;/code&gt; notation.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a88799e5f11eafccfcd165c4ecee9d04f">graphviz</link> (
const std::string &amp; filename)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1afbda84b9c30ce21ba27f2283b6e9db2d">param</link> (
std::string name, <link linkend="d5/d54/structmarian_1_1Shape">Shape</link> shape, Args... args)<para><emphasis>Constructs a new node representing a parameter in an expression
graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a98fec0be161df64c066f9d871aba4274">constant</link> (
<link linkend="d5/d54/structmarian_1_1Shape">Shape</link> shape, Args... args)<para><emphasis>Constructs a new node representing a constant in an expression
graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a836f54cf0875925d01380999d6f53483">ones</link> (
Args... args)<para><emphasis>Constructs a new node representing a constant (with value 1) in an
expression graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a5287d5dbc9db07b0d00e5cbf58d168c3">zeros</link> (
Args... args)<para><emphasis>Constructs a new node representing a constant (with value 0) in an
expression graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a187a176cd6a6b793b6b65dc1a13814e5">dropout</link> (
float prob, <link linkend="d5/d54/structmarian_1_1Shape">Shape</link> shape)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a0816bd611240498f346c3557593b2538">gaussian</link> (
float mean, float stddev, <link linkend="d5/d54/structmarian_1_1Shape">Shape</link> shape)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a89df066a4abd34e1e999303cc53edd1e">get</link> (
std::string name)<para><emphasis>Returns the first item in the list with the specified name, if such
an item exists.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1ad1a373be43a00ef9ce35666145137b08">Ptr</link>&lt; <link linkend="dc/d36/classmarian_1_1Parameters">Parameters</link> &gt; &amp; <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a01122decdd8ff42c1c4ed519fd0222c9">params</link> (
)<para><emphasis>Gets the list of all parameter nodes of this expression graph.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a95bb5e6efbc99952867e46f5db9dc461">add</link> (
<link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> node)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a6ac51867f0abfd22696e85b392f1bfcb">remove_top_node</link> (
<link linkend="da/d22/namespacemarian_1a498d8baf75b754011078b890b39c8e12">Expr</link> node)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a7bd933313f66b7a696292fc17b21d78b">tensor</link> (
<link linkend="da/d22/namespacemarian_1a88b71ec34bb354564cddc24eb80f7e14">Tensor</link> &amp; t, Args &amp;&amp;... args)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a12e72d92651d3eb42762a0fdccf3c560">free</link> (
<link linkend="da/d22/namespacemarian_1a88b71ec34bb354564cddc24eb80f7e14">Tensor</link> &amp; t)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a97c49d6448e774f350083559f02719ad">clear</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a3525ef405ce9f66ec86a47e9178dad72">clearParameters</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1ae3a2ead5df1981b78a78f72c363b5a47">setReloaded</link> (
bool reloaded)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a67747b40ca80d7dc5b5dbd3d45793cce">load</link> (
const std::string &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/db9/classmarian_1_1ExpressionGraph_1a760757f21a572d7e80baf2c1cb0d3521">save</link> (
const std::string &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>Represents a computation graph of expressions, over which algorithmic differentiation may be performed. </para>
    </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a65e074b28afd37450ef025bb97e06efa">
                <title>marian::ExpressionGraph::ExpressionGraph (const ExpressionGraph &amp;)=delete</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1ac1669810aad34acc14f6f2e5eea13a9d">
                <title>marian::ExpressionGraph::ExpressionGraph (ExpressionGraph &amp;&amp;)=delete</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a40b3f2a4c0bacb782241f321bd1d429c">
                <title>marian::ExpressionGraph::ExpressionGraph (bool inference=false)</title> <emphasis>Constructs a new expression graph.</emphasis>
                
<para>Constructor should be used as <link linkend="da/d22/namespacemarian_1afe55543784336e96f224f9d88206d1fb">New&lt;ExpressionGraph&gt;()</link> </para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a9dbcf2ff5e7ad496082daab4c71e4ea4">
                <title>marian::ExpressionGraph::~ExpressionGraph ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a887b328e3073bbdef1869ae6ff632ca4">
                <title>void marian::ExpressionGraph::setDevice (size_t device=0)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a6de2782630380b0b2d3a1ded6db5324d">
                <title>size_t marian::ExpressionGraph::getDevice ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a714920827388a0d6f880a90c2e5e5be0">
                <title>Ptr&lt;Backend&gt; marian::ExpressionGraph::getBackend ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1aec6911dc81df2dfbfb2c3ee6cfa6532a">
                <title>void marian::ExpressionGraph::switchParams (const std::string &amp;newNamespace)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1ae746a90c60109c20fd154ec6f491ea0e">
                <title>void marian::ExpressionGraph::reserveWorkspaceMB (size_t num)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a9b2b3ec0ad988aad229f779416632aa8">
                <title>void marian::ExpressionGraph::copyParams (Ptr&lt; ExpressionGraph &gt; graph)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a9ffa36f849946ba0153bd0e8f18e31f9">
                <title>void marian::ExpressionGraph::reuseWorkspace (Ptr&lt; ExpressionGraph &gt; graph)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1aac6f1862944bd673e6874662d9d4b465">
                <title>void marian::ExpressionGraph::backprop ()</title> <emphasis>Performs backpropogation on this expression graph.</emphasis>
                
<para>Backpropogation is implemented by performing first the forward pass and then the backward pass of algorithmic differentiation (AD) on the nodes of the graph. </para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a1ce5fad852cb6d30cfd0a2d729bb44c3">
                <title>bool marian::ExpressionGraph::fits ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1aa7596e34cc2895cf374ce06d9d5ee370">
                <title>void marian::ExpressionGraph::forward ()</title> <emphasis>Perform the forward pass of algorithmic differentiation (AD) on this
graph.</emphasis>
                
<para>This pass traverses the nodes of this graph in the order they were created; as each node is traversed, its <computeroutput>allocate()</computeroutput> method is called.</para>

<para>Once allocation is complete for all nodes, this pass again traverses the nodes, in creation order; as each node is traversed, its <computeroutput><link linkend="da/db9/classmarian_1_1ExpressionGraph_1aa7596e34cc2895cf374ce06d9d5ee370">forward()</link></computeroutput> method is called.</para>

<para>After this method has successfully completed, it is guaranteed that all node allocation has been completed, and that all forward pass computations have been performed. </para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a41337743d6e030cf6b8e2b2e4d39a908">
                <title>void marian::ExpressionGraph::forwardNext ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1ae4be44e38a47b0964a24880078eb16c3">
                <title>void marian::ExpressionGraph::backward ()</title> <emphasis>Perform the backward pass of algorithmic differentiation (AD) on
this graph.</emphasis>
                
<para>This pass traverses the nodes of this graph in reverse of the order they were created; as each node is traversed, its <computeroutput>set_zero_adjoint()</computeroutput> method is called.</para>

<para>Once this has been performed for all nodes, this pass again traverses the nodes, again in reverse creation order; as each node is traversed, its <computeroutput><link linkend="da/db9/classmarian_1_1ExpressionGraph_1ae4be44e38a47b0964a24880078eb16c3">backward()</link></computeroutput> method is called.</para>

<para>After this method has successfully completed, and that all backward pass computations have been performed. </para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a3bbdbd8964031c78c7825958d1e9c9fe">
                <title>std::string marian::ExpressionGraph::graphviz ()</title> <emphasis>Returns a string representing this expression graph in
&lt;code&gt;graphviz&lt;/code&gt; notation.</emphasis>
                
<para>This string can be used by <computeroutput>graphviz</computeroutput> tools to visualize the expression graph.</para>

<para><formalpara><title>Returns: </title>

<para>a string representing this expression graph in <computeroutput>graphviz</computeroutput> notation </para>
</formalpara>
</para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a88799e5f11eafccfcd165c4ecee9d04f">
                <title>void marian::ExpressionGraph::graphviz (const std::string &amp;filename)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1afbda84b9c30ce21ba27f2283b6e9db2d">
                <title>Expr marian::ExpressionGraph::param (std::string name, Shape shape, Args...args)</title> <emphasis>Constructs a new node representing a parameter in an expression
graph.</emphasis>
                
<para>This method records the parameter node in a list of parameter nodes, but does not attach the new parameter node to any existing expression graph.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>args</entry>
                                <entry>
<para>XXX Marcin, what are args here?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>a newly constructed parameter node </para>
</formalpara>
</para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a98fec0be161df64c066f9d871aba4274">
                <title>Expr marian::ExpressionGraph::constant (Shape shape, Args...args)</title> <emphasis>Constructs a new node representing a constant in an expression
graph.</emphasis>
                
<para>This method does not attach the new constant node to any existing expression graph.</para>

<para><formalpara><title>Returns: </title>

<para>a newly constructed constant node </para>
</formalpara>
</para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a836f54cf0875925d01380999d6f53483">
                <title>Expr marian::ExpressionGraph::ones (Args...args)</title> <emphasis>Constructs a new node representing a constant (with value 1) in an
expression graph.</emphasis>
                
<para>This method does not attach the new constant node to any existing expression graph.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>args</entry>
                                <entry>
<para>XXX Marcin, what are args here?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>a newly constructed constant node </para>
</formalpara>
</para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a5287d5dbc9db07b0d00e5cbf58d168c3">
                <title>Expr marian::ExpressionGraph::zeros (Args...args)</title> <emphasis>Constructs a new node representing a constant (with value 0) in an
expression graph.</emphasis>
                
<para>This method does not attach the new constant node to any existing expression graph.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>args</entry>
                                <entry>
<para>XXX Marcin, what are args here?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>a newly constructed constant node </para>
</formalpara>
</para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a187a176cd6a6b793b6b65dc1a13814e5">
                <title>Expr marian::ExpressionGraph::dropout (float prob, Shape shape)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a0816bd611240498f346c3557593b2538">
                <title>Expr marian::ExpressionGraph::gaussian (float mean, float stddev, Shape shape)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a89df066a4abd34e1e999303cc53edd1e">
                <title>Expr marian::ExpressionGraph::get (std::string name)</title> <emphasis>Returns the first item in the list with the specified name, if such
an item exists.</emphasis>
                
<para>If no item with the specified name is found in the graph, this method throws an exception.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>Name of the desired expression node</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>the first item in the list with the specified name, if such an item exists </para>
</formalpara>
</para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a01122decdd8ff42c1c4ed519fd0222c9">
                <title>Ptr&lt;Parameters&gt;&amp; marian::ExpressionGraph::params ()</title> <emphasis>Gets the list of all parameter nodes of this expression graph.</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>the list of all parameter nodes of this expression graph </para>
</formalpara>
</para>

            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a95bb5e6efbc99952867e46f5db9dc461">
                <title>Expr marian::ExpressionGraph::add (Expr node)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a6ac51867f0abfd22696e85b392f1bfcb">
                <title>void marian::ExpressionGraph::remove_top_node (Expr node)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a7bd933313f66b7a696292fc17b21d78b">
                <title>void marian::ExpressionGraph::tensor (Tensor &amp;t, Args &amp;&amp;...args)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a12e72d92651d3eb42762a0fdccf3c560">
                <title>void marian::ExpressionGraph::free (Tensor &amp;t)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a97c49d6448e774f350083559f02719ad">
                <title>void marian::ExpressionGraph::clear ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a3525ef405ce9f66ec86a47e9178dad72">
                <title>void marian::ExpressionGraph::clearParameters ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1ae3a2ead5df1981b78a78f72c363b5a47">
                <title>void marian::ExpressionGraph::setReloaded (bool reloaded)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a67747b40ca80d7dc5b5dbd3d45793cce">
                <title>void marian::ExpressionGraph::load (const std::string &amp;name)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="da/db9/classmarian_1_1ExpressionGraph_1a760757f21a572d7e80baf2c1cb0d3521">
                <title>void marian::ExpressionGraph::save (const std::string &amp;name)</title> <emphasis></emphasis>
                
            </section>
</section>
